// <auto-generated />
using System;
using Gatekeeper.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gatekeeper.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200223043902_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("Gatekeeper.Models.Identity.Token", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("scope")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("Gatekeeper.Models.Identity.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("emailPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("pronouns")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("registered")
                        .HasColumnType("TEXT");

                    b.Property<int>("role")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("totp")
                        .HasColumnType("BLOB");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("verification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Gatekeeper.Models.Identity.Token", b =>
                {
                    b.HasOne("Gatekeeper.Models.Identity.User", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gatekeeper.Models.Identity.User", b =>
                {
                    b.OwnsOne("Gatekeeper.Models.Identity.CryptSecret", "password", b1 =>
                        {
                            b1.Property<int>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Userid")
                                .HasColumnType("INTEGER");

                            b1.Property<byte[]>("hash")
                                .IsRequired()
                                .HasColumnType("BLOB");

                            b1.Property<int>("iterations")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("length")
                                .HasColumnType("INTEGER");

                            b1.Property<byte[]>("salt")
                                .IsRequired()
                                .HasColumnType("BLOB");

                            b1.Property<int>("saltLength")
                                .HasColumnType("INTEGER");

                            b1.HasKey("id");

                            b1.HasIndex("Userid")
                                .IsUnique();

                            b1.ToTable("users1");

                            b1.WithOwner()
                                .HasForeignKey("Userid");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
